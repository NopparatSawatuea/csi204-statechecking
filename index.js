function changeBackgroundColor() {
  const colors = ["#FF5733", "#33FF57", "#3357FF", "#F4C724", "#A833FF"];
  document.body.style.backgroundColor =
    colors[Math.floor(Math.random() * colors.length)];
}

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏ú‡πà‡∏≤‡∏ô HTML Attribute
document.getElementById("clickButton").onclick = function () {
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (alert) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
  alert("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÄ‡∏£‡∏≤");
};

document.getElementById("mouseoverButton").onmouseover = function () {
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ä‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏û‡∏µ (p)
  alert("‡πÄ‡∏≠‡∏≤‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞");
};

document.getElementById("keyupInput").onkeyup = function (event) {
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á input ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô p
  document.getElementById("message").textContent = event.target.value;
};

// Handle form submission
const form = document.getElementById("userForm");
const message = document.getElementById("message");

form.addEventListener("submit", function (event) {
  event.preventDefault(); // Prevent form from submitting normally
  const email = document.getElementById("email").value;
  const emailPattern = /^[^\s@]+@[^\s@]+\.com$/;

  if (emailPattern.test(email)) {
    alert("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } else {
    alert("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }
});

function calculateArea() {
  const radius = document.getElementById("radius").value;
  if (radius > 0) {
    const area = Math.PI * Math.pow(radius, 2); // ‡∏™‡∏π‡∏ï‡∏£: œÄ * r^2
    alert(`‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏°: ${area.toFixed(2)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢`);
  } else {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏¢‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏
function checkAge() {
  const age = document.getElementById("age").value;
  let ageGroup = "";

  if (age >= 0 && age <= 12) {
    ageGroup = "‡πÄ‡∏î‡πá‡∏Å";
  } else if (age >= 13 && age <= 19) {
    ageGroup = "‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô";
  } else if (age >= 20 && age <= 35) {
    ageGroup = "‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà";
  } else if (age >= 36 && age <= 49) {
    ageGroup = "‡∏ß‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏ô";
  } else if (age >= 50) {
    ageGroup = "‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏";
  } else {
    ageGroup = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
  }

  alert(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô: ${ageGroup}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà-‡∏Ñ‡∏µ‡πà
function checkEvenOdd() {
  const number = document.getElementById("number").value;

  if (number === "") {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç");
    return;
  }

  const result = number % 2 === 0 ? "‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà" : "‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà";
  alert(`‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${result}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç 1-10 ‡∏î‡πâ‡∏ß‡∏¢ For Loop
function showNumbers() {
  let result = "";
  for (let i = 1; i <= 10; i++) {
    result += i + " ";
  }
  document.getElementById("forResult").textContent = `‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${result}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô While Loop ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå "exit"
function startWhileLoop() {
  let input;
  let allInputs = "";

  while (true) {
    input = prompt("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏û‡∏¥‡∏°‡∏û‡πå 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î):");
    if (input === "exit") {
      break; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "exit"
    }
    allInputs += input + ", ";
  }

  document.getElementById(
    "whileResult"
  ).textContent = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å: ${allInputs.slice(0, -2)}`;
}

// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ Factorial ‡πÅ‡∏ö‡∏ö Recursive
function factorial(n) {
  if (n === 0) return 1; // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ê‡∏≤‡∏ô: 0! = 1
  return n * factorial(n - 1); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
}

// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Factorial
function calculateFactorial() {
  const input = parseInt(document.getElementById("factorialInput").value);
  if (isNaN(input) || input < 0) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0!");
    return;
  }
  const result = factorial(input);
  alert("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Factorial ‡∏Ç‡∏≠‡∏á " + input + " ‡∏Ñ‡∏∑‡∏≠: " + result);
}

// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ Fibonacci ‡πÅ‡∏ö‡∏ö Recursive
function fibonacci(n) {
  if (n <= 1) return n; // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ê‡∏≤‡∏ô: F(0) = 0, F(1) = 1
  return fibonacci(n - 1) + fibonacci(n - 2); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
}

// üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Fibonacci
function calculateFibonacci() {
  const input = parseInt(document.getElementById("fibonacciInput").value);
  if (isNaN(input) || input < 0) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0!");
    return;
  }
  const result = fibonacci(input);
  alert("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Fibonacci ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà " + input + " ‡∏Ñ‡∏∑‡∏≠: " + result);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function sendMessage() {
  try {
    const messageInput = document.getElementById("message-input");
    const message = messageInput.value.trim();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (message === "") {
      throw new Error("Message cannot be empty");
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const messagesDiv = document.getElementById("messages");
    const newMessage = document.createElement("p");
    newMessage.textContent = "User: " + message;
    messagesDiv.appendChild(newMessage);

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå input ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    messageInput.value = "";
    messageInput.focus();

    console.log("Message sent:", message); // ‡πÉ‡∏ä‡πâ log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  } catch (error) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    console.error("Error:", error.message);
  }
}

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÇ‡∏´‡∏•‡∏î
window.onload = function () {
  debugger; // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  console.log("Chat app is ready.");
};

// Function to calculate GPA and grades
function calculateGPA() {
    // Get the scores from inputs
    let csi101 = parseFloat(document.getElementById("csi101").value);
    let csi102 = parseFloat(document.getElementById("csi102").value);
    let csi203 = parseFloat(document.getElementById("csi203").value);
    let csi204 = parseFloat(document.getElementById("csi204").value);
    let csi305 = parseFloat(document.getElementById("csi305").value);

    // Function to determine grade based on score
    function getGrade(score) {
        if (score >= 90) return 'A';
        if (score >= 80) return 'B+';
        if (score >= 70) return 'B';
        if (score >= 60) return 'C+';
        if (score >= 50) return 'C';
        if (score >= 40) return 'D+';
        if (score >= 30) return 'D';
        return 'F';
    }

    // Display grades for each subject
    document.getElementById("grade101").textContent = getGrade(csi101);
    document.getElementById("grade102").textContent = getGrade(csi102);
    document.getElementById("grade203").textContent = getGrade(csi203);
    document.getElementById("grade204").textContent = getGrade(csi204);
    document.getElementById("grade305").textContent = getGrade(csi305);

    // Function to calculate GPA points
    function getPoints(score) {
        if (score >= 90) return 4.0;   // A
        if (score >= 80) return 3.5;   // B+
        if (score >= 70) return 3.0;   // B
        if (score >= 60) return 2.5;   // C+
        if (score >= 50) return 2.0;   // C
        if (score >= 40) return 1.5;   // D+
        if (score >= 30) return 1.0;   // D
        return 0.0;                    // F
    }

    // Calculate total GPA points
    let totalPoints = 0;
    let subjects = 5;

    totalPoints += getPoints(csi101);
    totalPoints += getPoints(csi102);
    totalPoints += getPoints(csi203);
    totalPoints += getPoints(csi204);
    totalPoints += getPoints(csi305);

    // Calculate and display GPA
    let gpa = totalPoints / subjects;

    // Show GPA in an alert box
    alert("Your GPA is: " + gpa.toFixed(2));
}

// Check if there are existing tasks in localStorage
let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

// Load tasks from localStorage into the list
window.onload = function() {
    renderTasks();
}

// Function to add task
function addTask() {
    let taskInput = document.getElementById("todoInput").value;
    
    // Only add if input is not empty
    if (taskInput) {
        let newTask = {
            id: Date.now(), // Unique ID using timestamp
            text: taskInput
        };

        // Add task to tasks array
        tasks.push(newTask);
        
        // Save updated tasks array to localStorage
        localStorage.setItem('tasks', JSON.stringify(tasks));

        // Clear the input field
        document.getElementById("todoInput").value = "";

        // Re-render tasks
        renderTasks();
    }
}

// Function to render tasks
function renderTasks() {
    let todoList = document.getElementById("todoList");
    todoList.innerHTML = ""; // Clear current list
    
    tasks.forEach(task => {
        let li = document.createElement("li");
        li.textContent = task.text;

        // Create delete button
        let deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.onclick = function() {
            deleteTask(task.id);
        };
        
        // Append the delete button to the list item
        li.appendChild(deleteButton);
        todoList.appendChild(li);
    });
}

// Function to delete task
function deleteTask(taskId) {
    // Filter out the task to be deleted
    tasks = tasks.filter(task => task.id !== taskId);

    // Save updated tasks array to localStorage
    localStorage.setItem('tasks', JSON.stringify(tasks));

    // Re-render tasks
    renderTasks();
}

// Function to fetch data from the API when the button is clicked
function fetchUserData() {
    // Clear the user list before loading new data
    const userList = document.getElementById('userList');
    userList.innerHTML = '<p>Loading...</p>'; // Show loading message

    fetch('https://jsonplaceholder.typicode.com/users')
        .then(response => response.json()) // Convert the response to JSON
        .then(users => {
            // Clear the loading message
            userList.innerHTML = '';

            // Loop through the users array and create HTML to display each user's details
            users.forEach(user => {
                const userDiv = document.createElement('div');
                userDiv.classList.add('user');

                // Create HTML content for each user
                userDiv.innerHTML = `
                    <h3>${user.name}</h3>
                    <p><strong>Email:</strong> ${user.email}</p>
                    <p><strong>Address:</strong> ${user.address.street}, ${user.address.city}, ${user.address.zipcode}</p>
                `;

                // Append the userDiv to the userList container
                userList.appendChild(userDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching data:', error);
            // Optionally show an error message to the user
            userList.innerHTML = '<p>Sorry, there was an error fetching user data.</p>';
        });
}

// Function to generate a 6-digit lottery number
function generateLotteryNumber() {
    return Math.floor(100000 + Math.random() * 900000); // Random 6-digit number
}

// Function to check if the user's guess is correct
function checkLottery() {
    const userGuess = document.getElementById('userGuess').value;
    const lotteryNumber = generateLotteryNumber();

    // Display the generated lottery number
    document.getElementById('lotteryNumber').innerText = `The lottery number is: ${lotteryNumber}`;

    // Check if the user's guess matches the lottery number
    if (userGuess == lotteryNumber) {
        alert("You guessed the correct number!");
    } else {
        alert("Sorry, your guess is incorrect. Try again!");
    }
}

